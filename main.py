import sqlite3
import pandas as pd
from datetime import datetime
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
from config import BOT_TOKEN, ADMIN_CHAT_ID

DB_PATH = "messages.db"


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        chat_id INTEGER,
        username TEXT,
        full_name TEXT,
        message_text TEXT,
        timestamp TEXT
    )
    """)
    conn.commit()
    conn.close()


# --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É ---
def save_message(user_id, chat_id, username, full_name, message_text):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO messages (user_id, chat_id, username, full_name, message_text, timestamp)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (user_id, chat_id, username, full_name, message_text, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
    conn.close()


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ –∞–¥–º–∏–Ω—É ---
async def send_ids(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_message is None:
        return

    chat = update.effective_chat
    user = update.effective_user
    message_text = update.effective_message.text_html or "‚Äî"

    save_message(
        user_id=user.id,
        chat_id=chat.id,
        username=user.username or "‚Äî",
        full_name=user.full_name,
        message_text=message_text,
    )

    if chat.type in ("group", "supergroup"):
        chat_title = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        text = (
            f"üì£ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {chat_title}\n"
            f"Group ID: <code>{chat.id}</code>\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
            f"Username: @{user.username if user.username else '‚Äî'}\n"
            f"User ID: <code>{user.id}</code>\n\n"
            f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}"
        )
    else:
        text = (
            f"üí¨ –õ–∏—á–Ω—ã–π —á–∞—Ç/–∫–∞–Ω–∞–ª\n\n"
            f"Chat ID: <code>{chat.id}</code>\n"
            f"User: {user.full_name}\n"
            f"User ID: <code>{user.id}</code>\n"
            f"–¢–µ–∫—Å—Ç: {message_text}"
        )

    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, parse_mode="HTML")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É:", e)


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_ids(update, context)
    await update.effective_message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


# --- –ö–æ–º–∞–Ω–¥–∞ /report ---
async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql_query("SELECT * FROM messages", conn)
    conn.close()

    file_path = "report.xlsx"
    df.to_excel(file_path, index=False)

    await context.bot.send_document(
        chat_id=ADMIN_CHAT_ID,
        document=InputFile(file_path),
        filename="report.xlsx",
        caption="üìä –û—Ç—á–µ—Ç –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º"
    )


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    if not BOT_TOKEN:
        raise ValueError("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –ø—É—Å—Ç–æ–π. –î–æ–±–∞–≤—å –µ–≥–æ –≤ config.py!")

    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("report", report_command))
    app.add_handler(MessageHandler(filters.ALL, send_ids))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
